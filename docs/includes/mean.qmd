---
title: "Mean probe"
output: html_document
---

```{r setup, include=FALSE}
library(tidyverse)
library(here)
library(bayestestR)
library(bayesplot)
library(brms)
library(emmeans)
library(report)
library(schoolmath)
knitr::opts_chunk$set(echo = FALSE, message = FALSE, warning = FALSE)

f95 <- function(n, mean, sd) {
  e <- qnorm(0.975)*sd/sqrt(n)
  return(c("lower" = mean - e, "upper" = mean + e))
}


syrett_theme <- function() {
  theme(
    axis.text = element_text(colour = "black", family = "Arial", size = 12),
    axis.title = element_text(colour = "black", family = "Arial", size = 12))
}


mean_df = read.csv(here("data", "tidy", "mean_data_tidy.csv"))

mean_mod_1 = readRDS(here("data", "models", "mean_mod_grad_s_n.rds"))

mean_mod_2 = readRDS(here("data", "models", "mean_mod_grad_s_p.rds"))

mean_mod_3 = readRDS(here("data", "models", "mean_mod_gs.rds"))
```

### General Plots and descriptive statistics

**Note**: Only figures and tables are included here without explanation (for the sake of time). Please see the approve page for examples.

```{r, dpi = 600}
#| label: fig-1
#| fig-cap: "Percentage of `yes` responses to declarative and sarcastic items"
rep1 = mean_df %>% 
  mutate(response = case_when(
    response == 0 ~ "No",
    response == 1 ~ "Yes",
  )) %>% 
  group_by(response, intonation) %>% 
  summarise(n_resp = n()) %>% 
  pivot_wider(names_from = response, values_from = n_resp) %>% 
  mutate(total = No + Yes) %>% 
  mutate(pct = (Yes/total)*100)

rep1 %>% 
  ggplot(aes(x = intonation, y = pct, fill = intonation)) + 
  geom_col(color = "black") +
  ylab("Percentage") +
  ylim(0,100) +
  theme_minimal() + syrett_theme() + guides(fill="none") + ggtitle("Percentage of `yes` responses to declarative and sarcastic items")



```

```{r, dpi = 600}
#| label: fig-2
#| fig-cap: "Percentage of `yes` responses to declarative and sarcastic items in both groups"
rep2 = mean_df %>% 
  mutate(response = case_when(
    response == 0 ~ "No",
    response == 1 ~ "Yes",
  )) %>% 
  group_by(response, intonation, group) %>% 
  summarise(n_resp = n()) %>% 
  pivot_wider(names_from = response, values_from = n_resp) %>% 
  mutate(total = No + Yes) %>% 
  mutate(Percentage = (Yes/total)*100)

total_data = mean_df %>% 
  group_by(group) %>% 
  summarize(n = n())

rep2 %>% 
  ggplot(aes(x = intonation, y = Percentage, fill = intonation)) + 
  geom_col(color = "black") +
  ylim(0,100) +
  theme_minimal() + syrett_theme() + guides(fill="none") + 
  facet_wrap(~group) +
  ggtitle("Percentage of `yes` responses to declarative and sarcastic items in both groups")
```

```{r, dpi = 600}
#| label: fig-3
#| fig-cap: "Percentage of `yes` responses by modifier type overall"

rep3 = mean_df %>% 
  mutate(response = case_when(
    response == 0 ~ "No",
    response == 1 ~ "Yes",
  )) %>% 
  group_by(response, modifier_type) %>% 
  summarise(n_resp = n()) %>% 
  pivot_wider(names_from = response, values_from = n_resp) %>% 
  mutate(total = No + Yes) %>% 
  mutate(Percentage = (Yes/total)*100)

total_data = mean_df %>% 
  group_by(group) %>% 
  summarize(n = n())

rep3 %>% 
  ggplot(aes(x = modifier_type, y = Percentage, fill = modifier_type)) + 
  geom_col(color = "black") +
  ylim(0,100) +
  theme_minimal() + syrett_theme() + guides(fill="none") + 
  ggtitle("Percentage of `yes` responses by modifier type overall")
```

```{r, dpi = 600}
#| label: fig-4
#| fig-cap: "Percentage of `yes` responses by modifier type in both groups"

rep4 = mean_df %>% 
  mutate(response = case_when(
    response == 0 ~ "No",
    response == 1 ~ "Yes",
  )) %>% 
  group_by(response, modifier_type, group) %>% 
  summarise(n_resp = n()) %>% 
  pivot_wider(names_from = response, values_from = n_resp) %>% 
  mutate(total = No + Yes) %>% 
  mutate(Percentage = (Yes/total)*100) 


rep4 %>% 
  ggplot(aes(x = modifier_type, y = Percentage, fill = modifier_type)) + 
  geom_col(color = "black") +
  syrett_theme() + 
  ylim(0,100) +guides(fill="none") + 
  facet_wrap(~group) + theme_minimal() + theme(axis.text.x = element_text(angle = 90)) +
  ggtitle("Percentage of `yes` responses by modifier type in both groups")
```

```{r, dpi = 600}
#| label: fig-5
#| fig-cap: "Percentage of `yes` responses in each modifier type and intonation"

rep5 = mean_df %>% 
  mutate(response = case_when(
    response == 0 ~ "No",
    response == 1 ~ "Yes",
  )) %>% 
  group_by(response, modifier_type, intonation) %>% 
  summarise(n_resp = n()) %>% 
  pivot_wider(names_from = response, values_from = n_resp) %>% 
  mutate(total = No + Yes) %>% 
  mutate(Percentage = (Yes/total)*100)

rep5 %>% 
  ggplot(aes(x = intonation, y = Percentage, fill = intonation)) + 
  geom_col(color = "black") +
  syrett_theme() + 
  ylim(0,100) +guides(fill="none") + 
  facet_wrap(~modifier_type) + theme_minimal() + theme(axis.text.x = element_text(angle = 90)) +
  ggtitle("Percentage of `yes` responses in each modifier type and intonation")

```

### Model Results 

```{r, dpi = 600}
#| label: fig-6
#| fig-cap: "Percentage of `yes` responses by modifier type and intonation in both groups"

rep6 = mean_df %>% 
  mutate(response = case_when(
    response == 0 ~ "No",
    response == 1 ~ "Yes",
  )) %>% 
  group_by(response, modifier_type, intonation, group) %>% 
  summarise(n_resp = n()) %>% 
  pivot_wider(names_from = response, values_from = n_resp) %>% 
  mutate(total = No + Yes) %>% 
  mutate(Percentage = (Yes/total)*100) 
  
rep6 %>%   
  ggplot(aes(x = group, y = Percentage, fill = group)) + 
  geom_col(color = "black") +
  syrett_theme() + 
  ylim(0,100) +guides(fill="none") + 
  facet_wrap(intonation~modifier_type) + theme_minimal() + theme(axis.text.x = element_text(angle = 90)) +
  ggtitle("Percentage of `yes` responses by modifier type and intonation in both groups")
```

#### Model for -grad-subj

```{r}
#| label: mos-2
#| tbl-cap: "Table 1: Description of the posterior distribution for the Bayesian Logistic regression for -grad-subj."

describe_posterior(
  mean_mod_3,
  effects = "fixed",
  component = "all",
  test = c("p_direction", "p_significance", "rope"),
  centrality = "all"
) %>%
  as.data.frame() %>% 
  mutate(across(where(is.numeric), round, 3)) %>% 
  knitr::kable(row.names = FALSE)

repmod1 = describe_posterior(
  mean_mod_3,
  effects = "fixed",
  component = "all",
  test = c("p_direction", "p_significance", "rope"),
  centrality = "all"
) %>%
  as.data.frame() %>% 
  mutate(across(where(is.numeric), round, 3))
```

```{r}
#| tbl-cap: "Table 2: Pairwise comparisons for the Bayesian Logistic regression for -grad-subj."

pairs(emmeans(mean_mod_3, ~ intonation*group)) %>% 
  as.data.frame() %>% 
  mutate_if(is.numeric, funs(. * -1)) %>% 
  mutate(across(where(is.numeric), round, 3)) %>% 
  mutate(result = case_when(
    is.positive(estimate) & is.positive(lower.HPD) & is.positive(upper.HPD) ~ 1,
    is.negative(estimate) & is.negative(lower.HPD) & is.negative(upper.HPD) ~ 1,
    is.positive(estimate) & is.negative(lower.HPD) & is.positive(upper.HPD) ~ 0,
    is.positive(estimate) & is.positive(lower.HPD) & is.negative(upper.HPD) ~ 0,
    is.negative(estimate) & is.negative(lower.HPD) & is.positive(upper.HPD) ~ 0,
    is.negative(estimate) & is.positive(lower.HPD) & is.negative(upper.HPD) ~ 0
  )) %>% 
  knitr::kable(row.names = FALSE)
  
```

```{r}
repmod2 = describe_posterior(
  mean_mod_1,
  effects = "fixed",
  component = "all",
  test = c("p_direction", "p_significance", "rope"),
  centrality = "all"
) %>%
  as.data.frame() %>% 
  mutate(across(where(is.numeric), round, 3))

```

#### Model for grad+subj+neg

```{r}
#| label: mos-1
#| tbl-cap: "Table 3: Description of the posterior distribution for the Bayesian Logistic regression for grad+subj+neg."

describe_posterior(
  mean_mod_1,
  effects = "fixed",
  component = "all",
  test = c("p_direction", "p_significance", "rope"),
  centrality = "all"
) %>%
  as.data.frame() %>% 
  mutate(across(where(is.numeric), round, 3)) %>% 
  knitr::kable(row.names = FALSE)
```

```{r}
#| tbl-cap: "Table 4: Pairwise comparisons for the Bayesian Logistic regression for grad+subj+neg."

pairs(emmeans(mean_mod_1, ~ intonation*group)) %>% 
  as.data.frame() %>% 
  mutate_if(is.numeric, funs(. * -1)) %>% 
  mutate(across(where(is.numeric), round, 3)) %>% 
  mutate(result = case_when(
    is.positive(estimate) & is.positive(lower.HPD) & is.positive(upper.HPD) ~ 1,
    is.negative(estimate) & is.negative(lower.HPD) & is.negative(upper.HPD) ~ 1,
    is.positive(estimate) & is.negative(lower.HPD) & is.positive(upper.HPD) ~ 0,
    is.positive(estimate) & is.positive(lower.HPD) & is.negative(upper.HPD) ~ 0,
    is.negative(estimate) & is.negative(lower.HPD) & is.positive(upper.HPD) ~ 0,
    is.negative(estimate) & is.positive(lower.HPD) & is.negative(upper.HPD) ~ 0
  )) %>% 
  knitr::kable(row.names = FALSE)
  
```

#### Model for grad+subj+pos 

```{r}
repmod3 = describe_posterior(
  mean_mod_2,
  effects = "fixed",
  component = "all",
  test = c("p_direction", "p_significance", "rope"),
  centrality = "all"
) %>%
  as.data.frame() %>% 
  mutate(across(where(is.numeric), round, 3))
```

```{r}
#| label: mos-3
#| tbl-cap: "Table 5: Description of the posterior distribution for the Bayesian Logistic regression for grad+subj+pos"

describe_posterior(
  mean_mod_2,
  effects = "fixed",
  component = "all",
  test = c("p_direction", "p_significance", "rope"),
  centrality = "all"
) %>%
  as.data.frame() %>% 
  mutate(across(where(is.numeric), round, 3)) %>% 
  knitr::kable(row.names = FALSE)
```

```{r}
#| tbl-cap: "Table 6: Pairwise comparisons for the Bayesian Logistic regression for grad+subj+pos."

pairs(emmeans(mean_mod_1, ~ intonation*group)) %>% 
  as.data.frame() %>% 
  mutate_if(is.numeric, funs(. * -1)) %>% 
  mutate(across(where(is.numeric), round, 3)) %>% 
  mutate(result = case_when(
    is.positive(estimate) & is.positive(lower.HPD) & is.positive(upper.HPD) ~ 1,
    is.negative(estimate) & is.negative(lower.HPD) & is.negative(upper.HPD) ~ 1,
    is.positive(estimate) & is.negative(lower.HPD) & is.positive(upper.HPD) ~ 0,
    is.positive(estimate) & is.positive(lower.HPD) & is.negative(upper.HPD) ~ 0,
    is.negative(estimate) & is.negative(lower.HPD) & is.positive(upper.HPD) ~ 0,
    is.negative(estimate) & is.positive(lower.HPD) & is.negative(upper.HPD) ~ 0
  )) %>% 
  knitr::kable(row.names = FALSE)
  
```
